@page "/graph"

@using DungeonOfTheWickedEventSourcing.Common.Actors.Diagnostics;
@using DungeonOfTheWickedEventSourcing.Common.Actors.Diagnostics.Commands;
@using DungeonOfTheWickedEventSourcing.Common.Actors.Diagnostics.Events;
@using DungeonOfTheWickedEventSourcing.Common.Hubs;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Text.Json;

<h3>Graph</h3>
@_message
<br />
<button @onclick=Send>Send</button>

<style>
    .circle {
        border-radius: 50%;
        background-color: transparent;
        background-clip: content-box;
        border: 1px solid #00247D;
    }
</style>

<div style="position:absolute;left:800px;top:500px">

    @{
        var lastIW = string.Empty;
        var lastIC = string.Empty;
        for (int i = 0; i < 5; i++)
        {
            var x = i * 300;
            var iW = $"{x}px";
            var iC = $"{150 - ((x / 100) * 50)}px";



            <div id="@(i+1)" class="circle" style="width:@iW;height:@iW;position:absolute;top:@iC;left:@iC">
                @foreach (var item in _actorNodes.Values.Where(x => x.Depth == i))
                {
                    <div class="circle" style="width:50px;height:50px;background-color:rebeccapurple">
                        @item.Name
                    </div>
                }
            </div>

            if (i == 5 - 1)
            {
                lastIW = iW;
                lastIC = iC;
            }
        }
        <svg width="@lastIW" height="@lastIW" style="width:@lastIW;height:@lastIW;position:absolute;top:@lastIC;left:@lastIC;border-style:dotted;border-color:red;">
            <line x1="50" y1="50" x2="350" y2="50" stroke="red" />
        </svg>
    }

    @if (_actorNodes.Any())
    {
        // TODO: Draw nodes on the circles

        @if (_actorEdges.Any())
        {
            // TODO: Connect the nodes
        }
    }


    <div id="div1" style="width: 100px; height: 100px; top:0; left:0; background:#e53935 ; position:absolute;"></div>
    <div id="div2" style="width: 100px; height: 100px; top:0; left:300px; background:#4527a0 ; position:absolute;"></div>

</div>

@code {

    private readonly Dictionary<long, ActorNode> _actorNodes = new();
    private readonly Dictionary<long, List<long>> _actorEdges = new();
    private HubConnection _hubConnection;
    private string _message;

    protected override async Task OnInitializedAsync()
    {
        _message = "Yay";

        _hubConnection ??= new HubConnectionBuilder()
            .WithUrl(new Uri("http://localhost:5555/MainHub"), options =>
            {
                options.SkipNegotiation = true;
                options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
            })
            .AddJsonProtocol(x =>
             {
                 x.PayloadSerializerOptions = new JsonSerializerOptions { NumberHandling = System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString, PropertyNamingPolicy = JsonNamingPolicy.CamelCase };
             })
            .Build();

        _hubConnection.On<ActorStartedEvent>($"On{typeof(ActorStartedEvent).Name}", OnActorStartedEventAsync);
        _hubConnection.On<ActorStoppedEvent>($"On{typeof(ActorStoppedEvent).Name}", OnActorStoppedEventAsync);
        _hubConnection.On<ActorReceivedMessageEvent>($"On{typeof(ActorReceivedMessageEvent).Name}", OnActorReceivedMessageEventAsync);
        _hubConnection.On<QueryActorsFinishedEvent>($"On{typeof(QueryActorsFinishedEvent).Name}", OnQueryActorsFinishedEventAsync);

        await _hubConnection.StartAsync();
    }

    private async Task OnQueryActorsFinishedEventAsync(QueryActorsFinishedEvent queryActorsFinishedEvent)
    {
        foreach (var actor in queryActorsFinishedEvent.Actors)
        {
            if (!_actorNodes.ContainsKey(actor.Key))
            {
                _actorNodes.Add(actor.Key, actor.Value);
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActorStartedEventAsync(ActorStartedEvent actorStartedEvent)
    {
        if (!_actorNodes.ContainsKey(actorStartedEvent.Id))
        {
            _actorNodes.Add(actorStartedEvent.Id, new ActorNode { Id = actorStartedEvent.Id, Name = actorStartedEvent.Name, Depth = actorStartedEvent.Depth });
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActorStoppedEventAsync(ActorStoppedEvent actorStoppedEvent)
    {
        _actorNodes.Remove(actorStoppedEvent.Id);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActorReceivedMessageEventAsync(ActorReceivedMessageEvent actorReceivedMessageEvent)
    {
        if (!_actorEdges.TryGetValue(actorReceivedMessageEvent.Id, out var edges))
        {
            edges = new List<long>();
            _actorEdges.Add(actorReceivedMessageEvent.Id, edges);
        }

        if (!edges.Contains(actorReceivedMessageEvent.SenderId))
        {
            edges.Add(actorReceivedMessageEvent.SenderId);
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task Send()
    {
        await _hubConnection.InvokeAsync(nameof(MainHub.OnClientMessage), typeof(QueryActorsCommand).Name);
    }
}
